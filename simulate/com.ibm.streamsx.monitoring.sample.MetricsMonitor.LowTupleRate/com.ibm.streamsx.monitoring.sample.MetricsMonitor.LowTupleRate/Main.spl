//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

/**
 * This sample application for the [com.ibm.streamsx.monitoring::MetricsMonitor]
 * simulates an application that has a low tuple rate by outputting tuples at a 
 * rate of 1 tuple/s over a duration of 20 seconds, then stops. 
 * 
 * The MetricsMonitor's threshold document should have a threshold rule that gets 
 * triggered when the rate becomes 0 tuples/s. Look in the thresholdDocument.json 
 * in the data directory for more details.
 */
 
namespace com.ibm.streamsx.monitoring.sample.MetricsMonitor.LowTupleRate ;

use com.ibm.streamsx.monitoring.metrics::* ;

composite Main
{
	graph
		/**
		 * The LowTupleRateSimulator simulates a scenario where the rate of 
		 * the nTuplesSubmitted metric becomes 0.
		 */
		 () as Simulator = LowTupleRateSimulator()
		 {
		 
		 }
	
		/*
		 * The MetricsSource outputs nTuplesSubmitted metric tuples.
		 */
		stream<Notification> MetricsTuples = MetricsSource()
		{
			param
				connectionURL: getSubmissionTimeValue("connectionURL");
				user: getSubmissionTimeValue("user");
				password: getSubmissionTimeValue("password");
				domainId: getSubmissionTimeValue("domainId");
				scanPeriod: (float64)getSubmissionTimeValue("scanPeriod", "5.0");
				filterDocument : dataDirectory() + "/filterDocument.json" ;
				emitMetricTuple : periodic ;
		}

		/**
		 * The MetricsMonitor monitors the nTuplesSubmitted and outputs an 
		 * alert when its rate becomes 0.
		 */
		stream<rstring message> MetricsAlerts = MetricsMonitor(MetricsTuples)
		{
			param
				thresholdDocumentPath : dataDirectory() + "/thresholdDocument.json" ;
		}

		/**
		 * The FileSink outputs the messages to a text file. This can easily be 
		 * substituted with a Export/Publish operator.
		 */
		() as Sink = FileSink(MetricsAlerts)
		{
			param
				file : "alerts.txt" ;
		}
}

composite LowTupleRateSimulator
{
	graph
		/*
		 * The TupleData outputs tuples at a rate of 1 tuple/s for a duration of 
		 * 20 seconds, then stops.
		 */
		stream<rstring emptyMessage> TupleData = Beacon()
		{
			param
				period : 1.0 ;
				iterations : 20 ;
			output
				TupleData : emptyMessage = "" ;
		}

		() as Custom_0 = Custom(TupleData)
		{
		
		}

}