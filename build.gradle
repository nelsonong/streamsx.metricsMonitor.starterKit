apply plugin: 'java'
apply from: 'common.gradle'

sourceSets {
    main {
        java {
            srcDirs = ['impl/java/src']
        }
        output.classesDir = 'impl/java/bin'
    }
}

version = "0.1.0.0"
libsDirName = '../impl/lib'

processResources {
    from ('impl/java/src') {
        include '**/*.properties'
    }
}

repositories {
    jcenter()
    ivy {
        url 'https://github.com/'
        layout 'pattern', {
            artifact '/[organization]/[module]/archive/[revision].[ext]'
        }
    }
}

dependencies {
    compile fileTree(dir: STREAMS_INSTALL + '/lib', include: ['com.ibm.streams.operator.jar', 'com.ibm.streams.operator.samples.jar'])
    
    compile "IBMStreams:streamsx.monitoring:$MONITORING_BASE_TAG@zip"
    compile fileTree(dir: 'opt/downloaded', include: ['com.ibm.streamsx.monitoring*.jar'])

    compile "nelsonong:streamsx.slack:$SLACK_BASE_TAG@zip"
    compile fileTree(dir: 'opt/downloaded', include: ['com.ibm.streamsx.slack*.jar'])
}

/*
 * Get dependencies.
 */
task getDependencies(type: Copy) {
    into "opt/downloaded"
    from configurations.runtime
    exclude '*streams*'
}

/*
 * Build dependencies.
 */
task buildDependencies {
    doLast {
        buildMonitoringToolkit()
        buildSlackToolkit()
    }
}

/*
 * Build monitoring toolkits.
 */
def buildMonitoringToolkit() {
    def tempDir = projectDir.getPath() + '/dependencies'

    // Download the repository's archive.
    copy {
        def zipPath = project.configurations.compile.find {it.name.startsWith("streamsx.monitoring")}

        from zipTree(file(zipPath))
        into file("$tempDir")
    }

    // Get the downloaded toolkit directory.
    def outDir = new File("$tempDir")

    def monitoringDir
    outDir.eachDirMatch(~/streamsx.monitoring.*/) { file ->
        monitoringDir = new File(file, 'com.ibm.streamsx.monitoring')
    }

    // Build downloaded toolkit.
    buildAntToolkit(monitoringDir.getPath())

    // Copy the library into the opt/downloaded folder.
    copy {
        from fileTree(dir : (new File(monitoringDir, 'impl/lib')).getPath(), include : ['*.jar'])
        into projectDir.getPath() + '/opt/downloaded'
    }
}

/*
 * Build Slack toolkit.
 */
def buildSlackToolkit() {
    def tempDir = projectDir.getPath() + '/dependencies'

    // Download the repository's archive.
    copy {
        def zipPath = project.configurations.compile.find {it.name.startsWith("streamsx.slack")}

        from zipTree(file(zipPath))
        into file("$tempDir")
    }

    // Get the downloaded toolkit directory.
    def outDir = new File("$tempDir")

    def slackDir
    outDir.eachDirMatch(~/streamsx.slack.*/) { file ->
        slackDir = new File(file, 'com.ibm.streamsx.slack')
    }

    // Build downloaded toolkit.
    buildAntToolkit(slackDir.getPath())

    // Copy the library into the opt/downloaded folder.
    copy {
        from fileTree(dir : (new File(slackDir, 'impl/lib')).getPath(), include : ['*.jar'])
        into projectDir.getPath() + '/opt/downloaded'
    }
}

/*
 * Build metrics monitor application.
 */
task buildApplication {
    doLast {
	splMakeToolkit()
	buildSab()
    }
}

/*
 * Execute built application.
 */
task execute {
    doLast {
	executeSab()
    }
}

/*
 * Clean build files.
 */
task deleteBuildFiles(type: Delete) {
    delete "opt"
    delete "dependencies"
    delete "output"
    delete "build"
    delete "impl"
}

/*
 * Clean toolkit.
 */
task cleanToolkit() {
    doLast {
        splCleanToolkit()
    }
}

compileJava.dependsOn getDependencies, buildDependencies
compileJava.finalizedBy buildApplication
clean.dependsOn deleteBuildFiles, cleanToolkit
