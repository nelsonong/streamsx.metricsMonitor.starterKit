apply plugin: 'java'
apply from: 'common.gradle'

sourceSets {
    main {
        java {
            srcDirs = ['impl/java/src']
        }
        output.classesDir = 'impl/java/bin'
    }
}

version = "0.1.0.0"
libsDirName = '../impl/lib'

processResources {
    from ('impl/java/src') {
        include '**/*.properties'
    }
}

repositories {
    jcenter()
    ivy {
        url 'https://github.com/'
        layout 'pattern', {
            artifact '/[organization]/[module]/archive/[revision].[ext]'
        }
    }
}

/* Defs */
def STREAMS_INSTALL = System.getenv("STREAMS_INSTALL")
def METRICS_BASE_TAG = 'v1.0.9' // Update this tag when changing the underlying Metrics toolkit version
def SLACK_BASE_TAG = 'v0.1.0'	// Update this tag when changing the underlying Slack toolkit version

dependencies {
    compile fileTree(dir: STREAMS_INSTALL + '/lib', include: ['com.ibm.streams.operator.jar', 'com.ibm.streams.operator.samples.jar'])
    
    compile "nelsonong:streamsx.metrics:$METRICS_BASE_TAG@zip"
    compile fileTree(dir: 'opt/downloaded', include: ['com.ibm.streamsx.metrics*.jar'])

    compile "nelsonong:streamsx.slack:$SLACK_BASE_TAG@zip"
    compile fileTree(dir: 'opt/downloaded', include: ['com.ibm.streamsx.slack*.jar'])
}


def buildMetricsLibrary() {
    def tempDir = projectDir.getPath() + '/.metrics'

    // Download the repository's archive.
    copy {
        def zipPath = project.configurations.compile.find {it.name.startsWith("streamsx.metrics")}

        from zipTree(file(zipPath))
        into file("$tempDir")
    }

    // Get the downloaded toolkit directory.
    def outDir = new File("$tempDir")
    def metricsDir
    outDir.eachDirMatch(~/streamsx.metrics.*/) { file ->
        metricsDir = new File(file, 'com.ibm.streamsx.metrics')
    }

    // Build downloaded toolkit.
    buildAntToolkit(metricsDir.getPath())

    // Copy the library into the opt/downloaded folder.
    copy {
        from fileTree(dir : (new File(metricsDir, 'impl/lib')).getPath(), include : ['*.jar'])
        into projectDir.getPath() + '/opt/downloaded'
    }

    outDir.eachDirMatch(~/streamsx.metrics.*/) { file ->
        metricsDir = new File(file, 'com.ibm.streamsx.monitoring.metrics')
    }

    // Build downloaded toolkit.
    buildAntToolkit(metricsDir.getPath())

    // Copy the library into the opt/downloaded folder.
    copy {
        from fileTree(dir : (new File(metricsDir, 'impl/lib')).getPath(), include : ['*.jar'])
        into projectDir.getPath() + '/opt/downloaded'
    }
}

def buildSlackLibrary() {
    def tempDir = projectDir.getPath() + '/.slack'

    // Download the repository's archive.
    copy {
        def zipPath = project.configurations.compile.find {it.name.startsWith("streamsx.slack")}

        from zipTree(file(zipPath))
        into file("$tempDir")
    }

    // Get the downloaded toolkit directory.
    def outDir = new File("$tempDir")
    def slackDir
    outDir.eachDirMatch(~/streamsx.slack.*/) { file ->  
        slackDir = new File(file, 'com.ibm.streamsx.slack')
    }

    // Build downloaded toolkit.
    buildAntToolkit(slackDir.getPath())

    // Copy the library into the opt/downloaded folder.
    copy {
        from fileTree(dir : (new File(slackDir, 'impl/lib')).getPath(), include : ['*.jar'])
        into projectDir.getPath() + '/opt/downloaded'
    }
}

def buildMetricsMonitorApplication() {
    splMakeToolkit()
}

task library {
    doLast {
        buildMetricsLibrary()
	buildSlackLibrary()
	buildMetricsMonitorApplication()
	buildSab()
    }
}

task execute {
    doLast {
	executeSab()
    }
}

task getDeps(type: Copy) {
    into "opt/downloaded"
    from configurations.runtime
    exclude '*streams*'
}

task copyLibToImpl(type: Copy) {
    into "impl/lib"
    from "build/libs/"
}

task deleteDeps(type: Delete) {
    delete "opt"
    delete "bin"
    delete "output"
    delete "com.ibm.streamsx.metrics"
    delete "com.ibm.streamsx.slack"
    delete "impl/java/bin"
    delete "impl/lib/com.ibm.streamsx.metrics-${version}.jar"
    delete "impl/lib/com.ibm.streamsx.monitoring.metrics-${version}.jar"
    delete "impl/lib/com.ibm.streamsx.slack-${version}.jar"
    delete ".metrics"
    delete ".slack"
}

task buildToolkit() {
    doLast {
        splMakeToolkit()
    }
}

task cleanToolkit() {
    doLast {
        splCleanToolkit()
    }
}

compileJava.dependsOn getDeps, library
compileJava.finalizedBy buildToolkit
build.finalizedBy copyLibToImpl
clean.dependsOn deleteDeps, cleanToolkit
